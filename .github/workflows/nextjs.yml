# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Install g++
        run: |
          sudo apt update
          sudo apt install -y g++
      - name: Compile and prepare C++ engines
        run: |
          # Create directories for compiled engines
          mkdir -p /tmp/cubix-sudoku
          mkdir -p /tmp/cubix-slider
          mkdir -p /tmp/rubix
          
          # Compile Sudoku engine
          echo "Compiling Sudoku Engine..."
          g++ cpp/sudoku_engine.cpp -o /tmp/cubix-sudoku/sudoku_engine -O2
          
          # Compile Number Slider engine
          echo "Compiling Number Slider Engine..."
          g++ cpp/number_slider_engine.cpp -o /tmp/cubix-slider/number_slider_engine -O2
          
          # Compile Rubix engine
          echo "Compiling Rubik's Cube Engine..."
          g++ cpp/rubix.cpp -o /tmp/rubix/rubix -std=c++11 -O2
          
          echo "All engines compiled successfully"
          
          # Copy the compiled engines to public folder to be included in the build
          mkdir -p public/engines
          cp /tmp/cubix-sudoku/sudoku_engine public/engines/
          cp /tmp/cubix-slider/number_slider_engine public/engines/
          cp /tmp/rubix/rubix public/engines/
      - name: Test engines
        run: |
          echo "Testing Sudoku Engine..."
          /tmp/cubix-sudoku/sudoku_engine solve $(seq -s ' ' 1 81)
          echo "Engine test successful"
      - name: Build with Next.js
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL || '' }}
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Add .nojekyll file
        run: touch out/.nojekyll
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
